--- a/zenstates.py	2021-09-18 00:18:37.050137255 -0400
+++ b/zenstates.py	2021-09-18 00:23:28.800139031 -0400
@@ -127,12 +127,6 @@
         return "Disabled"
 
 
-def pstateToGuiString(fid, did, vid):
-    ratio = 25 * int(fid)/(12.5 * int(did))
-    vcore = vidToVolts(vid)
-    return "Ratio = %.2f - vCore = %.5f" % (ratio, vcore)
-
-
 def getPstateFid(index):
     return readmsr(PSTATES[index]) & 0xff
 
@@ -273,25 +267,8 @@
     return int(x, 16)
 
 
-def setPstateGui(index, fid, did, vid):
-    new = old = readmsr(PSTATES[index])
-    if fid in range(FID_MIN, FID_MAX):
-        new = setfid(new, fid)
-    if did in range(DID_MIN, DID_MAX):
-        new = setdid(new, did)
-    if vid in range(VID_MIN, VID_MAX):
-        new = setvid(new, vid)
-    if new != old:
-        if not (readmsr(MSR_HWCR) & (1 << 21)):
-            print('GUI: Locking TSC frequency')
-            for c in range(len(glob.glob('/dev/cpu/[0-9]*/msr'))):
-                writemsr(MSR_HWCR, readmsr(MSR_HWCR, c) | (1 << 21), c)
-        print('GUI: Set Pstate%s: %s' % (index, getPstateDetails(new)))
-        writemsr(PSTATES[index], new)
-
 parser = argparse.ArgumentParser(description='Dynamically edit AMD Ryzen processor parameters')
 parser.add_argument('-l', '--list', action='store_true', help='List all P-States')
-parser.add_argument('--no-gui', action='store_true', help='Run in CLI without GUI')
 parser.add_argument('--libcpuid', action='store_true', help='Use libcpuid instead of cpuid.py')
 parser.add_argument('-p', '--pstate', default=-1, type=int, choices=range(8), help='P-State to set')
 parser.add_argument('--enable', action='store_true', help='Enable P-State')
@@ -319,7 +296,6 @@
     and not args.smu_test_message
     and not args.oc_disable
     and not args.oc_enable
-    and args.no_gui
     and args.edc == -1
     and args.ppt == -1
     and args.tdc == -1):
@@ -504,231 +480,3 @@
 if args.edc > -1:
     setEDC(args.edc)
     print('Set EDC to %sA' % args.edc)
-
-
-###############################
-# GUI
-if not args.no_gui:
-    import PySimpleGUI as sg
-
-    _oc_mode = getOcMode()
-    if _oc_mode:
-        _default_vid = getCurrentVid()
-        _ratio = getRatio(0xC0010293)
-    else:
-        _default_vid = getPstateVid(0)
-        _ratio = getRatio(PSTATES[0])
-
-    _current_freq = int(_ratio * 100)
-
-    #sg.theme('Dark Teal 9')
-    sg.set_options(icon='icon.png', element_padding=(5, 5), margins=(1, 1), border_width=0)
-
-    # The tab 1, 2, 3 layouts - what goes inside the tab
-    tab1_layout = [
-        [sg.CBox('OC Mode', default=_oc_mode, key='ocMode', enable_events=True)],
-        [
-            sg.Text(' All Core Frequency', size=(18, 1)),
-            sg.Spin(
-                values=[x for x in range(550, 7000, 25)],
-                initial_value=_current_freq,
-                enable_events=True,
-                disabled=not _oc_mode,
-                size=(5, 1),
-                key='cpuOcFrequency'),
-            sg.Text('MHz'),
-        ],
-        [
-            sg.Text(' Overclock VID', size=(18, 1)),
-            sg.Spin(
-                values=[x for x in range(VID_MAX, VID_MIN, -1)],
-                initial_value=_default_vid,
-                enable_events=True,
-                disabled=not _oc_mode,
-                size=(5, 1),
-                key='cpuOcVid'),
-            sg.Text("%.5f V" % vidToVolts(_default_vid), key='cpuOcVoltageText'),
-        ],
-    ]
-
-    tab2_layout = [
-        [   
-            sg.Text('', size=(8, 1)),
-            sg.Text('FID', size=(6, 1)),
-            sg.Text('DID', size=(6, 1)),
-            sg.Text('VID', size=(6, 1))
-        ]
-    ]
-    for p in range(0, 3):
-        state = readmsr(PSTATES[p])
-        d = getPstateDetails(state)
-        tab2_layout.append([
-            sg.Text(' P-State%s' % str(p), size=(8, 1)),
-            sg.Spin(
-                values=[x for x in range(FID_MIN, FID_MAX, 1)],
-                initial_value=d[0],
-                enable_events=True,
-                size=(5, 1),
-                key='pstate%sFid' % str(p)
-            ),
-            sg.Spin(
-                values=[x for x in range(DID_MAX, DID_MIN - 1, -2)],
-                initial_value=d[1],
-                enable_events=True,
-                size=(5, 1),
-                key='pstate%sDid' % str(p)
-            ),
-            sg.Spin(
-                values=[x for x in range(VID_MAX, VID_MIN - 1, -1)],
-                initial_value=d[2],
-                enable_events=True,
-                size=(5, 1),
-                key='pstate%sVid' % str(p)
-            ),
-            sg.Text(pstateToGuiString(d[0], d[1], d[2]), key='pstateDetails%s' % str(p))
-        ])
-
-    tab3_layout = [
-        [sg.Text('C6 States')],
-        [sg.CBox(
-            'C6-State Package',
-            default=getC6package(),
-            enable_events=True,
-            key='c6StatePackage')
-        ],
-        [sg.CBox(
-            'C6-State Core',
-            default=getC6core(),
-            enable_events=True,
-            key='c6StateCore')
-        ],
-        [sg.Text('Experimental')],
-        [
-            sg.Text(' PPT', size=(6, 1)),
-            sg.Spin(
-                values=[x for x in range(-1, 1000, 1)],
-                initial_value=-1,
-                enable_events=True,
-                disabled=False,
-                size=(5, 1),
-                key='ppt'),
-            sg.Text('W', size=(4, 1)),
-            sg.Text(' TDC', size=(6, 1)),
-            sg.Spin(
-                values=[x for x in range(-1, 1000, 1)],
-                initial_value=-1,
-                enable_events=True,
-                disabled=False,
-                size=(5, 1),
-                key='tdc'),
-            sg.Text('A', size=(4, 1)),
-        ],
-        [
-            sg.Text(' EDC', size=(6, 1)),
-            sg.Spin(
-                values=[x for x in range(-1, 1000, 1)],
-                initial_value=-1,
-                enable_events=True,
-                disabled=False,
-                size=(5, 1),
-                key='edc'),
-            sg.Text('A', size=(4, 1)),
-            sg.Text(' Scalar', size=(6, 1)),
-            sg.Spin(
-                values=[x for x in range(0, 10, 1)],
-                initial_value=0,
-                enable_events=True,
-                disabled=True,
-                size=(5, 1),
-                key='scalar')
-        ],
-        [sg.Text(' * -1 = Auto / No change')]
-    ]
-
-    # The TabgGroup layout - it must contain only Tabs
-    if isOcFreqSupported:
-        tab_group_layout = [
-            [
-                sg.Tab('CPU', tab1_layout, key='-TAB1-'),
-                sg.Tab('P-States', tab2_layout, key='-TAB2-'),
-                sg.Tab('Power', tab3_layout, key='-TAB3-')
-            ]
-        ]
-    else:
-        tab_group_layout = [
-            [
-                sg.Tab('P-States', tab2_layout, key='-TAB2-'),
-                sg.Tab('Power', tab3_layout, key='-TAB3-')
-            ]
-        ]
-
-    # The window layout - defines the entire window
-    layout = [
-        [sg.TabGroup(tab_group_layout,
-                     # selected_title_color='blue',
-                     # selected_background_color='red',
-                     # tab_background_color='green',
-                     enable_events=True,
-                     # font='Courier 18',
-                     key='-TABGROUP-')],
-        [sg.Button('Apply', key='applyBtn'), sg.Button('Cancel')]
-    ]
-
-    def applyCpuSettings():
-        if values['ocMode']:
-            writesmu(SMU_CMD_OC_ENABLE)
-            writesmu(SMU_CMD_OC_FREQ_ALL_CORES, values['cpuOcFrequency'])
-            writesmu(SMU_CMD_OC_VID, values['cpuOcVid'])
-        else:
-            writesmu(SMU_CMD_OC_DISABLE)
-
-
-    def applyPstatesSettings():
-        for p in range(0, 3):
-            setPstateGui(p, values['pstate%sFid' % str(p)], values['pstate%sDid' % str(p)], values['pstate%sVid' % str(p)])
-
-
-    def applyPowerSettings():
-        setC6Core(values['c6StateCore'])
-        setC6Package(values['c6StatePackage'])
-        setPboLimits(values['ppt'], values['tdc'], values['edc'], values['scalar'])
-
-
-    window_title = "%s v%s" % (APP_NAME, APP_VERSION)
-    window = sg.Window(window_title, layout)
-    print('GUI: %s initialized' % window_title)
-
-    while True:     # Event Loop
-        event, values = window.read()
-        # print(event)
-        # print(values)
-
-        # Cancel or close event
-        if event in (None, 'Cancel'):
-            break
-
-        # Apply button events
-        if event == 'applyBtn' and values['-TABGROUP-'] == '-TAB1-':
-            if isOcFreqSupported: applyCpuSettings()
-        if event == 'applyBtn' and values['-TABGROUP-'] == '-TAB2-':
-            applyPstatesSettings()
-        if event == 'applyBtn' and values['-TABGROUP-'] == '-TAB3-':
-            applyPowerSettings()
-
-        # UI elements state change
-        if event == 'ocMode':
-            window['cpuOcFrequency'].update(disabled=(not values['ocMode']))
-            window['cpuOcVid'].update(disabled=(not values['ocMode']))
-        if event == 'cpuOcVid':
-            window['cpuOcVoltageText'].update("%.5f V" % vidToVolts(values['cpuOcVid']))
-
-        for p in range(0, 3):
-            if event in ['pstate%sFid' % str(p), 'pstate%sDid' % str(p), 'pstate%sVid' % str(p)]:
-                window['pstateDetails%s' % str(p)].update(
-                    pstateToGuiString(
-                        values['pstate%sFid' % str(p)],
-                        values['pstate%sDid' % str(p)],
-                        values['pstate%sVid' % str(p)]
-                    )
-                )
-    window.close()
